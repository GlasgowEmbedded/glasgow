from enum import IntEnum, IntFlag

__all__ = ["O", "SFR", "XREGBase", "XREGExtended", "offset"]

class O(IntEnum):
    """8051 Opcodes."""
    NOP                    = 0x00
    AJMP_addr11            = 0x01
    LJMP_addr16            = 0x02
    RR_A                   = 0x03
    INC_A                  = 0x04
    INC_direct             = 0x05
    INC_atR0               = 0x06
    INC_atR1               = 0x07
    INC_R0                 = 0x08
    INC_R1                 = 0x09
    INC_R2                 = 0x0a
    INC_R3                 = 0x0b
    INC_R4                 = 0x0c
    INC_R5                 = 0x0d
    INC_R6                 = 0x0e
    INC_R7                 = 0x0f
    JBC_bit_offset         = 0x10
    ACALL_addr11           = 0x11
    LCALL_addr16           = 0x12
    RRC_A                  = 0x13
    DEC_A                  = 0x14
    DEC_direct             = 0x15
    DEC_atR0               = 0x16
    DEC_atR1               = 0x17
    DEC_R0                 = 0x18
    DEC_R1                 = 0x19
    DEC_R2                 = 0x1a
    DEC_R3                 = 0x1b
    DEC_R4                 = 0x1c
    DEC_R5                 = 0x1d
    DEC_R6                 = 0x1e
    DEC_R7                 = 0x1f
    JB_bit_offset          = 0x20
    RET                    = 0x22
    RL_A                   = 0x23
    ADD_A_immed            = 0x24
    ADD_A_direct           = 0x25
    ADD_A_atR0             = 0x26
    ADD_A_atR1             = 0x27
    ADD_A_R0               = 0x28
    ADD_A_R1               = 0x29
    ADD_A_R2               = 0x2a
    ADD_A_R3               = 0x2b
    ADD_A_R4               = 0x2c
    ADD_A_R5               = 0x2d
    ADD_A_R6               = 0x2e
    ADD_A_R7               = 0x2f
    JNB_bit_offset         = 0x30
    RETI                   = 0x32
    RLC_A                  = 0x33
    ADDC_A_immed           = 0x34
    ADDC_A_direct          = 0x35
    ADDC_A_atR0            = 0x36
    ADDC_A_atR1            = 0x37
    ADDC_A_R0              = 0x38
    ADDC_A_R1              = 0x39
    ADDC_A_R2              = 0x3a
    ADDC_A_R3              = 0x3b
    ADDC_A_R4              = 0x3c
    ADDC_A_R5              = 0x3d
    ADDC_A_R6              = 0x3e
    ADDC_A_R7              = 0x3f
    JC_offset              = 0x40
    ORL_direct_A           = 0x42
    ORL_direct_immed       = 0x43
    ORL_A_immed            = 0x44
    ORL_A_direct           = 0x45
    ORL_A_atR0             = 0x46
    ORL_A_atR1             = 0x47
    ORL_A_R0               = 0x48
    ORL_A_R1               = 0x49
    ORL_A_R2               = 0x4a
    ORL_A_R3               = 0x4b
    ORL_A_R4               = 0x4c
    ORL_A_R5               = 0x4d
    ORL_A_R6               = 0x4e
    ORL_A_R7               = 0x4f
    JNC_offset             = 0x50
    ANL_direct_A           = 0x52
    ANL_direct_immed       = 0x53
    ANL_A_immed            = 0x54
    ANL_A_direct           = 0x55
    ANL_A_atR0             = 0x56
    ANL_A_atR1             = 0x57
    ANL_A_R0               = 0x58
    ANL_A_R1               = 0x59
    ANL_A_R2               = 0x5a
    ANL_A_R3               = 0x5b
    ANL_A_R4               = 0x5c
    ANL_A_R5               = 0x5d
    ANL_A_R6               = 0x5e
    ANL_A_R7               = 0x5f
    JZ_offset              = 0x60
    XRL_direct_A           = 0x62
    XRL_direct_immed       = 0x63
    XRL_A_immed            = 0x64
    XRL_A_direct           = 0x65
    XRL_A_atR0             = 0x66
    XRL_A_atR1             = 0x67
    XRL_A_R0               = 0x68
    XRL_A_R1               = 0x69
    XRL_A_R2               = 0x6a
    XRL_A_R3               = 0x6b
    XRL_A_R4               = 0x6c
    XRL_A_R5               = 0x6d
    XRL_A_R6               = 0x6e
    XRL_A_R7               = 0x6f
    JNZ_offset             = 0x70
    ORL_C_bit              = 0x72
    JMP_atAplusDPTR        = 0x73
    MOV_A_immed            = 0x74
    MOV_direct_immed       = 0x75
    MOV_atR0_immed         = 0x76
    MOV_atR1_immed         = 0x77
    MOV_R0_immed           = 0x78
    MOV_R1_immed           = 0x79
    MOV_R2_immed           = 0x7a
    MOV_R3_immed           = 0x7b
    MOV_R4_immed           = 0x7c
    MOV_R5_immed           = 0x7d
    MOV_R6_immed           = 0x7e
    MOV_R7_immed           = 0x7f
    SJMP_offset            = 0x80
    ANL_C_bit              = 0x82
    MOVC_A_atAplusPC       = 0x83
    DIV_AB                 = 0x84
    MOV_direct_direct      = 0x85
    MOV_direct_atR0        = 0x86
    MOV_direct_atR1        = 0x87
    MOV_direct_R0          = 0x88
    MOV_direct_R1          = 0x89
    MOV_direct_R2          = 0x8a
    MOV_direct_R3          = 0x8b
    MOV_direct_R4          = 0x8c
    MOV_direct_R5          = 0x8d
    MOV_direct_R6          = 0x8e
    MOV_direct_R7          = 0x8f
    MOV_DPTR_immed         = 0x90
    MOV_bit_C              = 0x92
    MOVC_A_atAplusDPTR     = 0x93
    SUBB_A_immed           = 0x94
    SUBB_A_direct          = 0x95
    SUBB_A_atR0            = 0x96
    SUBB_A_atR1            = 0x97
    SUBB_A_R0              = 0x98
    SUBB_A_R1              = 0x99
    SUBB_A_R2              = 0x9a
    SUBB_A_R3              = 0x9b
    SUBB_A_R4              = 0x9c
    SUBB_A_R5              = 0x9d
    SUBB_A_R6              = 0x9e
    SUBB_A_R7              = 0x9f
    ORL_C_notbit           = 0xa0
    MOV_C_bit              = 0xa2
    INC_DPTR               = 0xa3
    MUL_AB                 = 0xa4
    HALT                   = 0xa5
    MOV_atR0_direct        = 0xa6
    MOV_atR1_direct        = 0xa7
    MOV_R0_direct          = 0xa8
    MOV_R1_direct          = 0xa9
    MOV_R2_direct          = 0xaa
    MOV_R3_direct          = 0xab
    MOV_R4_direct          = 0xac
    MOV_R5_direct          = 0xad
    MOV_R6_direct          = 0xae
    MOV_R7_direct          = 0xaf
    ANL_C_notbit           = 0xb0
    CPL_bit                = 0xb2
    CPL_C                  = 0xb3
    CJNE_A_immed_offset    = 0xb4
    CJNE_A_direct_offset   = 0xb5
    CJNE_atR0_immed_offset = 0xb6
    CJNE_atR1_immed_offset = 0xb7
    CJNE_R0_immed_offset   = 0xb8
    CJNE_R1_immed_offset   = 0xb9
    CJNE_R2_immed_offset   = 0xba
    CJNE_R3_immed_offset   = 0xbb
    CJNE_R4_immed_offset   = 0xbc
    CJNE_R5_immed_offset   = 0xbd
    CJNE_R6_immed_offset   = 0xbe
    CJNE_R7_immed_offset   = 0xbf
    PUSH_direct            = 0xc0
    CLR_bit                = 0xc2
    CLR_C                  = 0xc3
    SWAP_A                 = 0xc4
    XCH_A_direct           = 0xc5
    XCH_A_atR0             = 0xc6
    XCH_A_atR1             = 0xc7
    XCH_A_R0               = 0xc8
    XCH_A_R1               = 0xc9
    XCH_A_R2               = 0xca
    XCH_A_R3               = 0xcb
    XCH_A_R4               = 0xcc
    XCH_A_R5               = 0xcd
    XCH_A_R6               = 0xce
    XCH_A_R7               = 0xcf
    POP_direct             = 0xd0
    SETB_bit               = 0xd2
    SETB_C                 = 0xd3
    DA_A                   = 0xd4
    DJNZ_direct_offset     = 0xd5
    XCHD_A_atR0            = 0xd6
    XCHD_A_atR1            = 0xd7
    DJNZ_R0_offset         = 0xd8
    DJNZ_R1_offset         = 0xd9
    DJNZ_R2_offset         = 0xda
    DJNZ_R3_offset         = 0xdb
    DJNZ_R4_offset         = 0xdc
    DJNZ_R5_offset         = 0xdd
    DJNZ_R6_offset         = 0xde
    DJNZ_R7_offset         = 0xdf
    MOVX_A_atDPTR          = 0xe0
    MOVX_A_atR0            = 0xe2
    MOVX_A_atR1            = 0xe3
    CLR_A                  = 0xe4
    MOV_A_direct           = 0xe5
    MOV_A_atR0             = 0xe6
    MOV_A_atR1             = 0xe7
    MOV_A_R0               = 0xe8
    MOV_A_R1               = 0xe9
    MOV_A_R2               = 0xea
    MOV_A_R3               = 0xeb
    MOV_A_R4               = 0xec
    MOV_A_R5               = 0xed
    MOV_A_R6               = 0xee
    MOV_A_R7               = 0xef
    MOVX_atDPTR_A          = 0xf0
    MOVX_atR0_A            = 0xf2
    MOVX_atR1_A            = 0xf3
    CPL_A                  = 0xf4
    MOV_direct_A           = 0xf5
    MOV_atR0_A             = 0xf6
    MOV_atR1_A             = 0xf7
    MOV_R0_A               = 0xf8
    MOV_R1_A               = 0xf9
    MOV_R2_A               = 0xfa
    MOV_R3_A               = 0xfb
    MOV_R4_A               = 0xfc
    MOV_R5_A               = 0xfd
    MOV_R6_A               = 0xfe
    MOV_R7_A               = 0xff

class SFR(IntEnum):
    """Chipcon 8051 Special Function Registers."""
    # CPU
    P0     = 0x80
    SP     = 0x81
    DPL0   = 0x82
    DPH0   = 0x83
    DPL1   = 0x84
    DPH1   = 0x85
    PCON   = 0x87
    TCON   = 0x88
    P1     = 0x90
    DPS    = 0x92
    S0CON  = 0x98
    IEN2   = 0x9a
    S1CON  = 0x9b
    P2     = 0xa0
    IEN0   = 0xa8
    IP0    = 0xa9
    IEN1   = 0xb8
    IP1    = 0xb9
    IRCON  = 0xc0
    PSW    = 0xd0
    ACC    = 0xe0
    IRCON2 = 0xe8
    B      = 0xf0
    # Memory
    MPAGE  = 0x93
    MEMCTR = 0xc7
    FMAP   = 0x9f
    # Clock
    CLKCON = 0xc6

class XREGBase(IntEnum):
    """
    Chipcon 8051 Special Function Registers mapped into XDATA.
    Base parts: CC111x CC251x CC243x
    """
    FWT    = 0xdfab
    FADDRL = 0xdfac
    FADDRH = 0xdfad
    FCTL   = 0xdfae
    FWDATA = 0xdfaf

class XREGExtended(IntEnum):
    """
    Chipcon 8051 Special Function Registers mapped into XDATA.
    Extended parts: CC253x CC254x
    """
    CHVER     = 0x6249
    CHIPID    = 0x624a
    FCTL      = 0x6270
    FADDRL    = 0x6271
    FADDRH    = 0x6272
    FWDATA    = 0x6273
    CHIPINFO0 = 0x6276
    CHIPINFO1 = 0x6277

def offset(o):
    """Convert signed offset to byte suitable for code."""
    return (o & 0xff)
